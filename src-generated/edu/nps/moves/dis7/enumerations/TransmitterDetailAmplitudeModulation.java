/**
 * Copyright (c) 2008-2023, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
// header autogenerated using string template dis7javalicense.txt

// autogenerated using string template disenumpart1.txt

package edu.nps.moves.dis7.enumerations;

import java.nio.ByteBuffer;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;

import edu.nps.moves.dis7.pdus.*;

/**
 * This <code>enum</code> type is generated from XML,
 *  UID 156,
 * marshal size 16;
 * TransmitterDetailAmplitudeModulation has 11 enumerations total.
 * @see <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java Tutorials: Enum Types</a>
 * @see java.lang.Enum
 */
public enum TransmitterDetailAmplitudeModulation 
{
    // autogenerated using string template disenumfootnotecomment.txt

    /** Other */
    // autogenerated using string template disenumpart2.txt
    OTHER (0, "Other"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** AFSK (Audio Frequency Shift Keying) */
    // autogenerated using string template disenumpart2.txt
    AFSK_AUDIO_FREQUENCY_SHIFT_KEYING (1, "AFSK (Audio Frequency Shift Keying)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** AM (Amplitude Modulation) */
    // autogenerated using string template disenumpart2.txt
    AM_AMPLITUDE_MODULATION (2, "AM (Amplitude Modulation)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** CW (Continuous Wave Modulation) */
    // autogenerated using string template disenumpart2.txt
    CW_CONTINUOUS_WAVE_MODULATION (3, "CW (Continuous Wave Modulation)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** DSB (Double Sideband) */
    // autogenerated using string template disenumpart2.txt
    DSB_DOUBLE_SIDEBAND (4, "DSB (Double Sideband)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** ISB (Independent Sideband) */
    // autogenerated using string template disenumpart2.txt
    ISB_INDEPENDENT_SIDEBAND (5, "ISB (Independent Sideband)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** LSB (Single Band Suppressed Carrier, Lower Sideband Mode) */
    // autogenerated using string template disenumpart2.txt
    LSB_SINGLE_BAND_SUPPRESSED_CARRIER_LOWER_SIDEBAND_MODE (6, "LSB (Single Band Suppressed Carrier, Lower Sideband Mode)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** SSB-Full (Single Sideband Full Carrier) */
    // autogenerated using string template disenumpart2.txt
    SSB_FULL_SINGLE_SIDEBAND_FULL_CARRIER (7, "SSB-Full (Single Sideband Full Carrier)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** SSB-Reduc (Single Band Reduced Carrier) */
    // autogenerated using string template disenumpart2.txt
    SSB_REDUC_SINGLE_BAND_REDUCED_CARRIER (8, "SSB-Reduc (Single Band Reduced Carrier)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** USB (Single Band Suppressed Carrier, Upper Sideband Mode) */
    // autogenerated using string template disenumpart2.txt
    USB_SINGLE_BAND_SUPPRESSED_CARRIER_UPPER_SIDEBAND_MODE (9, "USB (Single Band Suppressed Carrier, Upper Sideband Mode)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** VSB (Vestigial Sideband) */
    // autogenerated using string template disenumpart2.txt
    VSB_VESTIGIAL_SIDEBAND (10, "VSB (Vestigial Sideband)");

    // autogenerated using string template disenumpart25.txt

    private int value;
    private final String description;

    /** Constructor */
    TransmitterDetailAmplitudeModulation(int value, String description)
    {
        this.value = value;
        this.description = description;
    }
    /** Provide enumeration value
      * @return integer value */
    public int getValue()
    {
        return value;
    }

    /** Provide enumeration description
     * @return description
     */
    public String getDescription()
    {
        return description;
    }

    /** bit width for this enumeration
     * @return number of bits wide
     */
    public static int getEnumBitWidth()
    {
      return 16;
    }

    /** 
     * Provide enumeration for a given value
     * @param value integer value of interest
     * @return enumeration corresponding to numeric value
     */
    public static TransmitterDetailAmplitudeModulation getEnumForValue(int value)
    {
       for (TransmitterDetailAmplitudeModulation nextEnum : TransmitterDetailAmplitudeModulation.values())
       {
          if (nextEnum.getValue() == value)
              return nextEnum;
       }
       System.out.flush(); // ensure contiguous console outputs
       System.err.println("No corresponding enumeration found for value " + value + " of enum TransmitterDetailAmplitudeModulation");
       System.err.flush(); // ensure contiguous console outputs
       return null;
    }

    // autogenerated using string template disenumpart3_16.txt

    /** Marshal value to DataOutputStream
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param dos DataOutputStream for output
     * @throws IOException input-output error */
    public void marshal(DataOutputStream dos) throws IOException
    {
        dos.writeShort(getValue());
    }

    /** Marshal value to ByteBuffer
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param byteBuffer ByteBuffer for output
     * @throws IOException input-output error */
    public void marshal(ByteBuffer byteBuffer) throws Exception
    {
        byteBuffer.putShort((short)getValue());
    }
    /** Unmarshal value to DataInputStream
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param dis DataInputStream for input
     * @throws Exception unmarshalling input-output error
     * @return enumeration of interest */
    public static TransmitterDetailAmplitudeModulation unmarshalEnum (DataInputStream dis) throws Exception
    {
        return getEnumForValue(dis.readUnsignedShort());
    } 

    /** Unmarshal enumeration value to ByteBuffer
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param byteBuffer ByteBuffer for input
     * @throws Exception unmarshalling input-output error
     * @return enumeration of interest */
    public static TransmitterDetailAmplitudeModulation unmarshalEnum (ByteBuffer byteBuffer) throws Exception
    {
        return getEnumForValue(byteBuffer.getShort());
    }   

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
    public int getMarshalledSize()
    {
        return 2; // 16 bits
    }
    
  /**
   * Provide name
   * @return  name
   */
    public String getName()
    {
        return name();
    }

  /**
   * Provide simple identifier
   * @return ID number and name
   */
    @Override
    public String toString()
    {
        return "TransmitterDetailAmplitudeModulation " + getValue() + " " + name(); 
    }
}
