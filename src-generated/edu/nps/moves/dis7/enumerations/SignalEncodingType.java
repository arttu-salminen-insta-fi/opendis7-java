/**
 * Copyright (c) 2008-2023, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
// header autogenerated using string template dis7javalicense.txt

// autogenerated using string template disenumpart1.txt

package edu.nps.moves.dis7.enumerations;

import java.nio.ByteBuffer;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;

import edu.nps.moves.dis7.pdus.*;

/**
 * This <code>enum</code> type is generated from XML,
 *  UID 271,
 * marshal size 14;
 * SignalEncodingType has 14 enumerations total.
 * @see <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java Tutorials: Enum Types</a>
 * @see java.lang.Enum
 */
public enum SignalEncodingType 
{
    // autogenerated using string template disenumfootnotecomment.txt

    /** 8-bit mu-law (ITU-T G.711) */
    // autogenerated using string template disenumpart2.txt
    _8_BIT_MU_LAW_ITU_T_G711 (1, "8-bit mu-law (ITU-T G.711)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** CVSD (MIL-STD-188-113), There are variants of CVSD encoding types that exist in the DIS community. These are not compatible with each other. At least two additional types of CVSD, known as CCTT CVSD and CECOM CVSD, also use Enumeration value 2.  Make sure that if you are using CVSD that your system is compatible with other systems playing in an exercise. */
    // autogenerated using string template disenumpart2.txt
    CVSD_MIL_STD_188_113 (2, "CVSD (MIL-STD-188-113)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** ADPCM (ITU-T G.726) */
    // autogenerated using string template disenumpart2.txt
    ADPCM_ITU_T_G726 (3, "ADPCM (ITU-T G.726)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** 16-bit Linear PCM 2s Complement, Big Endian */
    // autogenerated using string template disenumpart2.txt
    _16_BIT_LINEAR_PCM_2S_COMPLEMENT_BIG_ENDIAN (4, "16-bit Linear PCM 2s Complement, Big Endian"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** 8-bit Linear PCM, Unsigned */
    // autogenerated using string template disenumpart2.txt
    _8_BIT_LINEAR_PCM_UNSIGNED (5, "8-bit Linear PCM, Unsigned"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** VQ (Vector Quantization) */
    // autogenerated using string template disenumpart2.txt
    VQ_VECTOR_QUANTIZATION (6, "VQ (Vector Quantization)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** (unavailable for use) */
    // autogenerated using string template disenumpart2.txt
    UNAVAILABLE_FOR_USE (7, "(unavailable for use)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** GSM Full-Rate (ETSI 06.10) */
    // autogenerated using string template disenumpart2.txt
    GSM_FULL_RATE_ETSI_0610 (8, "GSM Full-Rate (ETSI 06.10)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** GSM Half-Rate (ETSI 06.20) */
    // autogenerated using string template disenumpart2.txt
    GSM_HALF_RATE_ETSI_0620 (9, "GSM Half-Rate (ETSI 06.20)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Speex Narrow Band, http://www.speex.org/ */
    // autogenerated using string template disenumpart2.txt
    SPEEX_NARROW_BAND (10, "Speex Narrow Band"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Opus, https://tools.ietf.org/html/rfc6716 */
    // autogenerated using string template disenumpart2.txt
    OPUS (11, "Opus"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** LPC-10 (FIPS PUB 137) */
    // autogenerated using string template disenumpart2.txt
    LPC_10_FIPS_PUB_137 (12, "LPC-10 (FIPS PUB 137)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** 16-bit Linear PCM 2s Complement, Little Endian */
    // autogenerated using string template disenumpart2.txt
    _16_BIT_LINEAR_PCM_2S_COMPLEMENT_LITTLE_ENDIAN (100, "16-bit Linear PCM 2s Complement, Little Endian"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** (unavailable for use) */
    // autogenerated using string template disenumpart2.txt
    UNAVAILABLE_FOR_USE_2 (255, "(unavailable for use)");

    // autogenerated using string template disenumpart25.txt

    private int value;
    private final String description;

    /** Constructor */
    SignalEncodingType(int value, String description)
    {
        this.value = value;
        this.description = description;
    }
    /** Provide enumeration value
      * @return integer value */
    public int getValue()
    {
        return value;
    }

    /** Provide enumeration description
     * @return description
     */
    public String getDescription()
    {
        return description;
    }

    /** bit width for this enumeration
     * @return number of bits wide
     */
    public static int getEnumBitWidth()
    {
      return 14;
    }

    /** 
     * Provide enumeration for a given value
     * @param value integer value of interest
     * @return enumeration corresponding to numeric value
     */
    public static SignalEncodingType getEnumForValue(int value)
    {
       for (SignalEncodingType nextEnum : SignalEncodingType.values())
       {
          if (nextEnum.getValue() == value)
              return nextEnum;
       }
       System.out.flush(); // ensure contiguous console outputs
       System.err.println("No corresponding enumeration found for value " + value + " of enum SignalEncodingType");
       System.err.flush(); // ensure contiguous console outputs
       return null;
    }

    // autogenerated using string template disenumpart3_16.txt

    /** Marshal value to DataOutputStream
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param dos DataOutputStream for output
     * @throws IOException input-output error */
    public void marshal(DataOutputStream dos) throws IOException
    {
        dos.writeShort(getValue());
    }

    /** Marshal value to ByteBuffer
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param byteBuffer ByteBuffer for output
     * @throws IOException input-output error */
    public void marshal(ByteBuffer byteBuffer) throws Exception
    {
        byteBuffer.putShort((short)getValue());
    }
    /** Unmarshal value to DataInputStream
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param dis DataInputStream for input
     * @throws Exception unmarshalling input-output error
     * @return enumeration of interest */
    public static SignalEncodingType unmarshalEnum (DataInputStream dis) throws Exception
    {
        return getEnumForValue(dis.readUnsignedShort());
    } 

    /** Unmarshal enumeration value to ByteBuffer
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param byteBuffer ByteBuffer for input
     * @throws Exception unmarshalling input-output error
     * @return enumeration of interest */
    public static SignalEncodingType unmarshalEnum (ByteBuffer byteBuffer) throws Exception
    {
        return getEnumForValue(byteBuffer.getShort());
    }   

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
    public int getMarshalledSize()
    {
        return 2; // 16 bits
    }
    
  /**
   * Provide name
   * @return  name
   */
    public String getName()
    {
        return name();
    }

  /**
   * Provide simple identifier
   * @return ID number and name
   */
    @Override
    public String toString()
    {
        return "SignalEncodingType " + getValue() + " " + name(); 
    }
}
