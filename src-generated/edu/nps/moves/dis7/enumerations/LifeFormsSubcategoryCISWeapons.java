/**
 * Copyright (c) 2008-2022, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
// header autogenerated using string template dis7javalicense.txt

// autogenerated using string template disenumpart1.txt

package edu.nps.moves.dis7.enumerations;

import java.nio.ByteBuffer;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;

import edu.nps.moves.dis7.pdus.*;

/**
 * This <code>enum</code> type is generated from XML,
 *  UID 17,
 * marshal size 8;
 * LifeFormsSubcategoryCISWeapons has 52 enumerations total.
 * @see <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java Tutorials: Enum Types</a>
 * @see java.lang.Enum
 */
public enum LifeFormsSubcategoryCISWeapons implements SubCategory
{
    // autogenerated using string template disenumfootnotecomment.txt

    /** Automatic (APS) 9-mm, Stechkin */
    // autogenerated using string template disenumpart2.txt
    AUTOMATIC_APS_9_MM_STECHKIN (201, "Automatic (APS) 9-mm, Stechkin"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** PSM 5.45-mm */
    // autogenerated using string template disenumpart2.txt
    PSM_545_MM (202, "PSM 5.45-mm"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Self-loading (PM) 9-mm, Makarov */
    // autogenerated using string template disenumpart2.txt
    SELF_LOADING_PM_9_MM_MAKAROV (203, "Self-loading (PM) 9-mm, Makarov"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** TT-33 7.62-mm, Tokarev */
    // autogenerated using string template disenumpart2.txt
    TT_33_762_MM_TOKAREV (204, "TT-33 7.62-mm, Tokarev"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Assault rifle AK and AKM, 7.62-mm */
    // autogenerated using string template disenumpart2.txt
    ASSAULT_RIFLE_AK_AND_AKM_762_MM (205, "Assault rifle AK and AKM, 7.62-mm"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Assault rifle AK-74 and AKS-74, 5.45-mm */
    // autogenerated using string template disenumpart2.txt
    ASSAULT_RIFLE_AK_74_AND_AKS_74_545_MM (206, "Assault rifle AK-74 and AKS-74, 5.45-mm"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Self-loading rifle (SKS), 7.62-mm, Simonov */
    // autogenerated using string template disenumpart2.txt
    SELF_LOADING_RIFLE_SKS_762_MM_SIMONOV (207, "Self-loading rifle (SKS), 7.62-mm, Simonov"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Sniper rifle SVD 7.62-mm, Dragunov */
    // autogenerated using string template disenumpart2.txt
    SNIPER_RIFLE_SVD_762_MM_DRAGUNOV (208, "Sniper rifle SVD 7.62-mm, Dragunov"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** AKSU-74 5.45-mm */
    // autogenerated using string template disenumpart2.txt
    AKSU_74_545_MM (209, "AKSU-74 5.45-mm"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** PPS-43 7.62-mm */
    // autogenerated using string template disenumpart2.txt
    PPS_43_762_MM (210, "PPS-43 7.62-mm"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** PPSh-41 7.62-mm */
    // autogenerated using string template disenumpart2.txt
    PPSH_41_762_MM (211, "PPSh-41 7.62-mm"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** General purpose PK 7.62-mm */
    // autogenerated using string template disenumpart2.txt
    GENERAL_PURPOSE_PK_762_MM (212, "General purpose PK 7.62-mm"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Heavy DShK-38 and Model 38/46 12.7-mm, Degtyarev */
    // autogenerated using string template disenumpart2.txt
    HEAVY_DSHK_38_AND_MODEL_38_46_127_MM_DEGTYAREV (213, "Heavy DShK-38 and Model 38/46 12.7-mm, Degtyarev"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Heavy NSV 12.7-mm */
    // autogenerated using string template disenumpart2.txt
    HEAVY_NSV_127_MM (214, "Heavy NSV 12.7-mm"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Light RPD 7.62-mm */
    // autogenerated using string template disenumpart2.txt
    LIGHT_RPD_762_MM (215, "Light RPD 7.62-mm"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Light RPK 7.62-mm */
    // autogenerated using string template disenumpart2.txt
    LIGHT_RPK_762_MM (216, "Light RPK 7.62-mm"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Light RPK-74 5.45-mm */
    // autogenerated using string template disenumpart2.txt
    LIGHT_RPK_74_545_MM (217, "Light RPK-74 5.45-mm"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Hand grenade M75 */
    // autogenerated using string template disenumpart2.txt
    HAND_GRENADE_M75 (218, "Hand grenade M75"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Hand grenade RGD-5 */
    // autogenerated using string template disenumpart2.txt
    HAND_GRENADE_RGD_5 (219, "Hand grenade RGD-5"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** AP hand grenade F1 */
    // autogenerated using string template disenumpart2.txt
    AP_HAND_GRENADE_F1 (220, "AP hand grenade F1"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** AT hand grenade RKG-3 */
    // autogenerated using string template disenumpart2.txt
    AT_HAND_GRENADE_RKG_3 (221, "AT hand grenade RKG-3"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** AT hand grenade RKG-3M */
    // autogenerated using string template disenumpart2.txt
    AT_HAND_GRENADE_RKG_3M (222, "AT hand grenade RKG-3M"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** AT hand grenade RKG-3T */
    // autogenerated using string template disenumpart2.txt
    AT_HAND_GRENADE_RKG_3T (223, "AT hand grenade RKG-3T"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Fragmentation hand grenade RGN */
    // autogenerated using string template disenumpart2.txt
    FRAGMENTATION_HAND_GRENADE_RGN (224, "Fragmentation hand grenade RGN"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Fragmentation hand grenade RGO */
    // autogenerated using string template disenumpart2.txt
    FRAGMENTATION_HAND_GRENADE_RGO (225, "Fragmentation hand grenade RGO"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Smoke hand grenade RDG-1 */
    // autogenerated using string template disenumpart2.txt
    SMOKE_HAND_GRENADE_RDG_1 (226, "Smoke hand grenade RDG-1"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Plamya launcher, 30-mm AGS-17 */
    // autogenerated using string template disenumpart2.txt
    PLAMYA_LAUNCHER_30_MM_AGS_17 (227, "Plamya launcher, 30-mm AGS-17"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Rifle-mounted launcher, BG-15 40-mm */
    // autogenerated using string template disenumpart2.txt
    RIFLE_MOUNTED_LAUNCHER_BG_15_40_MM (228, "Rifle-mounted launcher, BG-15 40-mm"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** LPO-50 */
    // autogenerated using string template disenumpart2.txt
    LPO_50 (229, "LPO-50"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** ROKS-3 */
    // autogenerated using string template disenumpart2.txt
    ROKS_3 (230, "ROKS-3"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Cart-mounted TPO-50 */
    // autogenerated using string template disenumpart2.txt
    CART_MOUNTED_TPO_50 (231, "Cart-mounted TPO-50"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Gimlet SA-16 */
    // autogenerated using string template disenumpart2.txt
    GIMLET_SA_16 (232, "Gimlet SA-16"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Grail SA-7 */
    // autogenerated using string template disenumpart2.txt
    GRAIL_SA_7 (233, "Grail SA-7"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Gremlin SA-14 */
    // autogenerated using string template disenumpart2.txt
    GREMLIN_SA_14 (234, "Gremlin SA-14"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Sagger AT-3 (MCLOS) */
    // autogenerated using string template disenumpart2.txt
    SAGGER_AT_3_MCLOS (235, "Sagger AT-3 (MCLOS)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Saxhorn AT-7 */
    // autogenerated using string template disenumpart2.txt
    SAXHORN_AT_7 (236, "Saxhorn AT-7"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Spigot A/B AT-14 */
    // autogenerated using string template disenumpart2.txt
    SPIGOT_A_B_AT_14 (237, "Spigot A/B AT-14"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** SA-18 */
    // autogenerated using string template disenumpart2.txt
    SA_18 (238, "SA-18"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** SA-19 */
    // autogenerated using string template disenumpart2.txt
    SA_19 (239, "SA-19"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Grad-1P manportable tripod rocket launcher, 122-mm (for Spesnatz and other specialists; aka 9P132) */
    // autogenerated using string template disenumpart2.txt
    GRAD_1P_MANPORTABLE_TRIPOD_ROCKET_LAUNCHER_122_MM_FOR_SPESNATZ_AND_OTHER_SPECIALISTS_AKA_9P132 (240, "Grad-1P manportable tripod rocket launcher, 122-mm (for Spesnatz and other specialists; aka 9P132)"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Light Anti-Armor weapon RPG-18 */
    // autogenerated using string template disenumpart2.txt
    LIGHT_ANTI_ARMOR_WEAPON_RPG_18 (241, "Light Anti-Armor weapon RPG-18"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Light Anti-Tank weapon RPG-22 */
    // autogenerated using string template disenumpart2.txt
    LIGHT_ANTI_TANK_WEAPON_RPG_22 (242, "Light Anti-Tank weapon RPG-22"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** MG andamp; RPG */
    // autogenerated using string template disenumpart2.txt
    MG_AMP_RPG (243, "MG &amp; RPG"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Portable rocket launcher RPG-16 */
    // autogenerated using string template disenumpart2.txt
    PORTABLE_ROCKET_LAUNCHER_RPG_16 (244, "Portable rocket launcher RPG-16"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Recoilless gun 73-mm SPG-9 */
    // autogenerated using string template disenumpart2.txt
    RECOILLESS_GUN_73_MM_SPG_9 (245, "Recoilless gun 73-mm SPG-9"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** VAT rocket launcher RPG-7 */
    // autogenerated using string template disenumpart2.txt
    VAT_ROCKET_LAUNCHER_RPG_7 (246, "VAT rocket launcher RPG-7"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Mon-50 Anti-Personnel mine */
    // autogenerated using string template disenumpart2.txt
    MON_50_ANTI_PERSONNEL_MINE (248, "Mon-50 Anti-Personnel mine"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** RPG-29 Vampir */
    // autogenerated using string template disenumpart2.txt
    RPG_29_VAMPIR (249, "RPG-29 Vampir"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Laser Designator */
    // autogenerated using string template disenumpart2.txt
    LASER_DESIGNATOR (250, "Laser Designator"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** AT-4 Spigot */
    // autogenerated using string template disenumpart2.txt
    AT_4_SPIGOT (251, "AT-4 Spigot"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** SA-24 Igla-S */
    // autogenerated using string template disenumpart2.txt
    SA_24_IGLA_S (252, "SA-24 Igla-S"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Type 69 RPG */
    // autogenerated using string template disenumpart2.txt
    TYPE_69_RPG (253, "Type 69 RPG");

    // autogenerated using string template disenumpart25.txt

    private int value;
    private final String description;

    /** Constructor */
    LifeFormsSubcategoryCISWeapons(int value, String description)
    {
        this.value = value;
        this.description = description;
    }
    /** Provide enumeration value
      * @return integer value */
    public int getValue()
    {
        return value;
    }

    /** Provide enumeration description
     * @return description
     */
    public String getDescription()
    {
        return description;
    }

    /** bit width for this enumeration
     * @return number of bits wide
     */
    public static int getEnumBitWidth()
    {
      return 8;
    }

    /** 
     * Provide enumeration for a given value
     * @param value integer value of interest
     * @return enumeration corresponding to numeric value
     */
    public static LifeFormsSubcategoryCISWeapons getEnumForValue(int value)
    {
       for (LifeFormsSubcategoryCISWeapons nextEnum : LifeFormsSubcategoryCISWeapons.values())
       {
          if (nextEnum.getValue() == value)
              return nextEnum;
       }
       System.out.flush(); // ensure contiguous console outputs
       System.err.println("No corresponding enumeration found for value " + value + " of enum LifeFormsSubcategoryCISWeapons");
       System.err.flush(); // ensure contiguous console outputs
       return null;
    }

    // autogenerated using string template disenumpart3_8.txt

    private boolean TRACE = false;

    /** Set tracing on/off for this object 
     * @param value whether tracing is on or off */
    public void setTRACE (boolean value)
    {
        TRACE = value;
    }

    /** Whether tracing is on or off for this object
     * @return whether tracing is on or off */
    public boolean getTRACE ()
    {
        return TRACE;
    }

    /** Marshal value to DataOutputStream
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param dos DataOutputStream for output
     * @throws IOException input-output error */
    public void marshal(DataOutputStream dos) throws IOException
    {
        dos.writeByte(getValue());
    }
    
    /** Marshal value to ByteBuffer
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param byteBuffer ByteBuffer for output
     * @throws IOException input-output error */
    public void marshal(ByteBuffer byteBuffer) throws Exception
    {
        byteBuffer.put((byte)getValue());
    }

    /** Unmarshal value to DataInputStream
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param dis DataInputStream for input
     * @throws Exception unmarshalling input-output error
     * @return enumeration of interest */
    public static LifeFormsSubcategoryCISWeapons unmarshalEnum (DataInputStream dis) throws Exception
    {
       /* try {
            value = dis.readUnsignedByte();
        }
        catch(IOException ex) {
            showError(ex);
        } */
        
        return getEnumForValue(dis.readByte());
    } 

    /** Unmarshal enumeration value to ByteBuffer
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param byteBuffer ByteBuffer for input
     * @throws Exception unmarshalling input-output error
     * @return enumeration of interest */
    public static LifeFormsSubcategoryCISWeapons unmarshalEnum(ByteBuffer byteBuffer) throws Exception
    {
        /*
        try {
            value = (int)byteBuffer.get();
        }
        catch(Exception ex) {
            showError(ex);
        }
        */
        return getEnumForValue(byteBuffer.get());
    }

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
    public int getMarshalledSize()
    {
        return 1; // 8 bits
    }
  /**
   * Provide name
   * @return  name
   */
    public String getName()
    {
        return name();
    }

    
  /**
   * Provide simple identifier
   * @return class name, value and name
   */
    @Override
    public String toString()
    {
        String padding = new String();
        if (this.getClass().getName().endsWith("DisPduType") && (getValue() < 10))
            padding = "0"; // leading zero for column spacing
        String result = this.getClass().getSimpleName() + " " + padding + getValue() + " " + name();
        if (getTRACE())
            System.out.println ("*** enum " + this.getClass().getSimpleName() + " name=" + name() + ", value=" + getValue() + "; " +
               result); // debug diagnostic
        return result;
    }
}
