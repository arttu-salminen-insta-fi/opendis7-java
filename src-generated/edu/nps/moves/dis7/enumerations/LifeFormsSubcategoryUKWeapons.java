// autogenerated using string template disenumpart1.txt

package edu.nps.moves.dis7.enumerations;

import java.nio.ByteBuffer;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;

import edu.nps.moves.dis7.pdus.*;

/**
 * This <code>enum</code> type is generated from XML,
 *  UID 18,
 * marshal size 8;
 * LifeFormsSubcategoryUKWeapons has 12 enumerations total.
 * @see <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java Tutorials: Enum Types</a>
 * @see java.lang.Enum
 */
public enum LifeFormsSubcategoryUKWeapons implements SubCategory
{
    // autogenerated using string template disenumfootnotecomment.txt

    /** LAW 80 */
    // autogenerated using string template disenumpart2.txt
    LAW_80 (1, "LAW 80"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Blowpipe */
    // autogenerated using string template disenumpart2.txt
    BLOWPIPE (2, "Blowpipe"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Javelin */
    // autogenerated using string template disenumpart2.txt
    JAVELIN (3, "Javelin"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** 51-mm mortar */
    // autogenerated using string template disenumpart2.txt
    _51_MM_MORTAR (4, "51-mm mortar"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** SLR 7.62-mm rifle */
    // autogenerated using string template disenumpart2.txt
    SLR_762_MM_RIFLE (5, "SLR 7.62-mm rifle"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Sterling 9-mm submachine gun */
    // autogenerated using string template disenumpart2.txt
    STERLING_9_MM_SUBMACHINE_GUN (6, "Sterling 9-mm submachine gun"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** L7A2 general purpose MG */
    // autogenerated using string template disenumpart2.txt
    L7A2_GENERAL_PURPOSE_MG (7, "L7A2 general purpose MG"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** L6 Wombat Recoilless rifle, */
    // autogenerated using string template disenumpart2.txt
    L6_WOMBAT_RECOILLESS_RIFLE_ (8, "L6 Wombat Recoilless rifle,"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Carl Gustav 89-mm recoilless rifle */
    // autogenerated using string template disenumpart2.txt
    CARL_GUSTAV_89_MM_RECOILLESS_RIFLE (9, "Carl Gustav 89-mm recoilless rifle"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** SA80 Individual/light support weapon */
    // autogenerated using string template disenumpart2.txt
    SA80_INDIVIDUAL_LIGHT_SUPPORT_WEAPON (10, "SA80 Individual/light support weapon"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Trigat */
    // autogenerated using string template disenumpart2.txt
    TRIGAT (11, "Trigat"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Milan AT missile */
    // autogenerated using string template disenumpart2.txt
    MILAN_AT_MISSILE (12, "Milan AT missile"),;

    // autogenerated using string template disenumpart25.txt

    private int value;
    private final String description;

    /** Constructor */
    LifeFormsSubcategoryUKWeapons(int value, String description)
    {
        this.value = value;
        this.description = description;
    }
    /** Provide enumeration value
      * @return integer value */
    public int getValue()
    {
        return value;
    }

    /** Provide enumeration description
     * @return description
     */
    public String getDescription()
    {
        return description;
    }

    /** bit width for this enumeration
     * @return number of bits wide
     */
    public static int getEnumBitWidth()
    {
      return 8;
    }

    /** 
     * Provide enumeration for a given value
     * @param value integer value of interest
     * @return enumeration corresponding to numeric value
     */
    public static LifeFormsSubcategoryUKWeapons getEnumForValue(int value)
    {
       for (LifeFormsSubcategoryUKWeapons nextEnum : LifeFormsSubcategoryUKWeapons.values())
       {
          if (nextEnum.getValue() == value)
              return nextEnum;
       }
       System.out.flush(); // ensure contiguous console outputs
       System.err.println("No corresponding enumeration found for value " + value + " of enum LifeFormsSubcategoryUKWeapons");
       System.err.flush(); // ensure contiguous console outputs
       return null;
    }

    // autogenerated using string template disenumpart3_8.txt

    private boolean TRACE = false;

    /** Set tracing on/off for this object 
     * @param value whether tracing is on or off */
    public void setTRACE (boolean value)
    {
        TRACE = value;
    }

    /** Whether tracing is on or off for this object
     * @return whether tracing is on or off */
    public boolean getTRACE ()
    {
        return TRACE;
    }

    /** Marshal value to DataOutputStream
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param dos DataOutputStream for output
     * @throws IOException input-output error */
    public void marshal(DataOutputStream dos) throws IOException
    {
        dos.writeByte(getValue());
    }
    
    /** Marshal value to ByteBuffer
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param byteBuffer ByteBuffer for output
     * @throws IOException input-output error */
    public void marshal(ByteBuffer byteBuffer) throws Exception
    {
        byteBuffer.put((byte)getValue());
    }

    /** Unmarshal value to DataInputStream
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param dis DataInputStream for input
     * @throws Exception unmarshalling input-output error
     * @return enumeration of interest */
    public static LifeFormsSubcategoryUKWeapons unmarshalEnum (DataInputStream dis) throws Exception
    {
       /* try {
            value = dis.readUnsignedByte();
        }
        catch(IOException ex) {
            showError(ex);
        } */
        
        return getEnumForValue(dis.readByte());
    } 

    /** Unmarshal enumeration value to ByteBuffer
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param byteBuffer ByteBuffer for input
     * @throws Exception unmarshalling input-output error
     * @return enumeration of interest */
    public static LifeFormsSubcategoryUKWeapons unmarshalEnum(ByteBuffer byteBuffer) throws Exception
    {
        /*
        try {
            value = (int)byteBuffer.get();
        }
        catch(Exception ex) {
            showError(ex);
        }
        */
        return getEnumForValue(byteBuffer.get());
    }

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
    public int getMarshalledSize()
    {
        return 1; // 8 bits
    }
    
  /**
   * Provide simple identifier
   * @return class name, value and name
   */
    @Override
    public String toString()
    {
        String padding = new String();
        if (this.getClass().getName().endsWith("DisPduType") && (getValue() < 10))
            padding = "0"; // leading zero for column spacing
        String result = this.getClass().getSimpleName() + " " + padding + getValue() + " " + name();
        if (getTRACE())
            System.out.println ("*** enum " + this.getClass().getSimpleName() + " name=" + name() + ", value=" + getValue() + "; " +
               result); // debug diagnostic
        return result;
    }
}
