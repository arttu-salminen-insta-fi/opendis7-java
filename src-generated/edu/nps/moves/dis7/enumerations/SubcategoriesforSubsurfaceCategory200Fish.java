// autogenerated using string template disenumpart1.txt

package edu.nps.moves.dis7.enumerations;

import java.nio.ByteBuffer;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;

import edu.nps.moves.dis7.pdus.*;

/**
 * This <code>enum</code> type is generated from XML,
 *  UID 120,
 * marshal size 8;
 * SubcategoriesforSubsurfaceCategory200Fish has 27 enumerations total.
 * @see <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java Tutorials: Enum Types</a>
 * @see java.lang.Enum
 */
public enum SubcategoriesforSubsurfaceCategory200Fish implements SubCategory
{
    // autogenerated using string template disenumfootnotecomment.txt

    /** Forage Fish, Small Schooling, 1-29 Small size schooling (forage) fish (herring-like, sardines, squid, krill) */
    // autogenerated using string template disenumpart2.txt
    FORAGE_FISH_SMALL_SCHOOLING (1, "Forage Fish, Small Schooling"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Herring */
    // autogenerated using string template disenumpart2.txt
    HERRING (2, "Herring"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Sardines */
    // autogenerated using string template disenumpart2.txt
    SARDINES (3, "Sardines"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Krill */
    // autogenerated using string template disenumpart2.txt
    KRILL (4, "Krill"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Squid */
    // autogenerated using string template disenumpart2.txt
    SQUID (5, "Squid"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Medium Schooling Fish, 30-59 Medium size schooling fish (cod-like, hake, haddock) */
    // autogenerated using string template disenumpart2.txt
    SUPPLEMENTAL_EMISSION_ENTITY_STATE (30, "Medium Schooling Fish"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Hake */
    // autogenerated using string template disenumpart2.txt
    HAKE (31, "Hake"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Cod */
    // autogenerated using string template disenumpart2.txt
    COD (32, "Cod"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Haddock */
    // autogenerated using string template disenumpart2.txt
    HADDOCK (33, "Haddock"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Mackerel */
    // autogenerated using string template disenumpart2.txt
    MACKEREL (34, "Mackerel"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Large Schooling Fish, 60-89 Large size schooling fish (tuna) */
    // autogenerated using string template disenumpart2.txt
    DATA_RELIABLE (60, "Large Schooling Fish"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Tuna */
    // autogenerated using string template disenumpart2.txt
    EVENT_REPORT_RELIABLE (61, "Tuna"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Small Shark, 90-119 Small shark */
    // autogenerated using string template disenumpart2.txt
    SMALL_SHARK (90, "Small Shark"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Dogfish Shark */
    // autogenerated using string template disenumpart2.txt
    DOGFISH_SHARK (91, "Dogfish Shark"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Medium Shark, 120-149 Medium shark */
    // autogenerated using string template disenumpart2.txt
    MEDIUM_SHARK (120, "Medium Shark"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Mako Shark */
    // autogenerated using string template disenumpart2.txt
    MAKO_SHARK (121, "Mako Shark"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Hammerhead Shark */
    // autogenerated using string template disenumpart2.txt
    HAMMERHEAD_SHARK (122, "Hammerhead Shark"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Large Shark, 150-179 Large to vary large shark */
    // autogenerated using string template disenumpart2.txt
    LARGE_SHARK (150, "Large Shark"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Great White Shark */
    // autogenerated using string template disenumpart2.txt
    GREAT_WHITE_SHARK (151, "Great White Shark"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Tiger Shark */
    // autogenerated using string template disenumpart2.txt
    TIGER_SHARK (152, "Tiger Shark"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Blue Shark */
    // autogenerated using string template disenumpart2.txt
    BLUE_SHARK (153, "Blue Shark"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Whale Shark */
    // autogenerated using string template disenumpart2.txt
    WHALE_SHARK (154, "Whale Shark"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Skate, 180-189 Skate/Ray */
    // autogenerated using string template disenumpart2.txt
    SKATE (180, "Skate"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Stingray */
    // autogenerated using string template disenumpart2.txt
    STINGRAY (181, "Stingray"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Eel, 190-199 Eel */
    // autogenerated using string template disenumpart2.txt
    EEL (190, "Eel"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Marlin, 200-255 Other fish */
    // autogenerated using string template disenumpart2.txt
    MARLIN (200, "Marlin"),
    // autogenerated using string template disenumfootnotecomment.txt

    /** Swordfish */
    // autogenerated using string template disenumpart2.txt
    SWORDFISH (201, "Swordfish");

    // autogenerated using string template disenumpart25.txt

    private int value;
    private final String description;

    /** Constructor */
    SubcategoriesforSubsurfaceCategory200Fish(int value, String description)
    {
        this.value = value;
        this.description = description;
    }
    /** Provide enumeration value
      * @return integer value */
    public int getValue()
    {
        return value;
    }

    /** Provide enumeration description
     * @return description
     */
    public String getDescription()
    {
        return description;
    }

    /** bit width for this enumeration
     * @return number of bits wide
     */
    public static int getEnumBitWidth()
    {
      return 8;
    }

    /** 
     * Provide enumeration for a given value
     * @param value integer value of interest
     * @return enumeration corresponding to numeric value
     */
    public static SubcategoriesforSubsurfaceCategory200Fish getEnumForValue(int value)
    {
       for (SubcategoriesforSubsurfaceCategory200Fish nextEnum : SubcategoriesforSubsurfaceCategory200Fish.values())
       {
          if (nextEnum.getValue() == value)
              return nextEnum;
       }
       System.out.flush(); // ensure contiguous console outputs
       System.err.println("No corresponding enumeration found for value " + value + " of enum SubcategoriesforSubsurfaceCategory200Fish");
       System.err.flush(); // ensure contiguous console outputs
       return null;
    }

    // autogenerated using string template disenumpart3_8.txt

    private boolean TRACE = false;

    /** Set tracing on/off for this object 
     * @param value whether tracing is on or off */
    public void setTRACE (boolean value)
    {
        TRACE = value;
    }

    /** Whether tracing is on or off for this object
     * @return whether tracing is on or off */
    public boolean getTRACE ()
    {
        return TRACE;
    }

    /** Marshal value to DataOutputStream
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param dos DataOutputStream for output
     * @throws IOException input-output error */
    public void marshal(DataOutputStream dos) throws IOException
    {
        dos.writeByte(getValue());
    }
    
    /** Marshal value to ByteBuffer
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param byteBuffer ByteBuffer for output
     * @throws IOException input-output error */
    public void marshal(ByteBuffer byteBuffer) throws Exception
    {
        byteBuffer.put((byte)getValue());
    }

    /** Unmarshal value to DataInputStream
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param dis DataInputStream for input
     * @throws Exception unmarshalling input-output error
     * @return enumeration of interest */
    public static SubcategoriesforSubsurfaceCategory200Fish unmarshalEnum (DataInputStream dis) throws Exception
    {
       /* try {
            value = dis.readUnsignedByte();
        }
        catch(IOException ex) {
            showError(ex);
        } */
        
        return getEnumForValue(dis.readByte());
    } 

    /** Unmarshal enumeration value to ByteBuffer
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param byteBuffer ByteBuffer for input
     * @throws Exception unmarshalling input-output error
     * @return enumeration of interest */
    public static SubcategoriesforSubsurfaceCategory200Fish unmarshalEnum(ByteBuffer byteBuffer) throws Exception
    {
        /*
        try {
            value = (int)byteBuffer.get();
        }
        catch(Exception ex) {
            showError(ex);
        }
        */
        return getEnumForValue(byteBuffer.get());
    }

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
    public int getMarshalledSize()
    {
        return 1; // 8 bits
    }
    
  /**
   * Provide simple identifier
   * @return ID number and name
   */
    @Override
    public String toString()
    {
        String padding = new String();
        if (this.getClass().getName().endsWith("DisPduType") && (getValue() < 10))
            padding = "0"; // leading zero for column spacing
        String result = "DisPduType " + padding + getValue() + " " + name();
        if (getTRACE())
            System.out.println ("*** enum " + this.getClass().getName() + " name=" + name() + ", value=" + getValue() + "; " +
               result); // debug diagnostic
        return result;
    }
}
