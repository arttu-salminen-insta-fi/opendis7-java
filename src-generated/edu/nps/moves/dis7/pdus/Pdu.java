/**
 * Copyright (c) 2008-2023, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
// header autogenerated using string template dis7javalicense.txt



package edu.nps.moves.dis7.pdus;

import java.util.*;
import java.io.*;
import edu.nps.moves.dis7.enumerations.*;
import edu.nps.moves.dis7.utilities.PduFactory;

/**
 * Base class of PduBase and LiveEntityPdu
 * @see <a href="https://ieeexplore.ieee.org/document/6387564" target="_blank">IEEE Std 1278.1-2012, IEEE Standard for Distributed Interactive Simulation - Application Protocols</a> 
 */
public abstract class Pdu extends Object implements Serializable,Marshaller
{

   /** The name of this PDU type */
   public static final String NAME = "Pdu";
   

    //  =================

    /** Whether this instance is a Reliable Pdu with guaranteed delivery
    * @return whether reliable */
    public boolean isReliablePdu ()
    {
      return getClass().getName().endsWith("RPdu") ||      // primary class
             getClass().getName().endsWith("ReliablePdu"); //   alias class
    }
    //  =================

    /** Whether this instance has a DistributedEmissionsRegenerationFamilyPdu superclass
      * @return whether this supertype is inherited */
    public boolean isDistributedEmissionsRegenerationFamilyPdu() { return getClass().getName().equals(DistributedEmissionsRegenerationFamilyPdu.FAMILY_NAME); }

    /** Whether this instance has an EntityInformationInteractionFamilyPdu superclass
      * @return whether this supertype is inherited */
    public boolean isEntityInformationInteractionFamilyPdu() { return getClass().getName().equals(EntityInformationInteractionFamilyPdu.FAMILY_NAME); }

    /** Whether this instance has an EntityManagementFamilyPdu superclass
      * @return whether this supertype is inherited */
    public boolean isEntityManagementFamilyPdu() { return getClass().getName().equals(EntityManagementFamilyPdu.FAMILY_NAME); }

    /** Whether this instance has an InformationOperationsFamilyPdu superclass
      * @return whether this supertype is inherited */
    public boolean isInformationOperationsFamilyPdu() { return getClass().getName().equals(InformationOperationsFamilyPdu.FAMILY_NAME); }

    /** Whether this instance has a LogisticsFamilyPdu superclass
      * @return whether this supertype is inherited */
    public boolean isLogisticsFamilyPdu() { return getClass().getName().equals(LogisticsFamilyPdu.FAMILY_NAME); }

    /** Whether this instance has a MinefieldFamilyPdu superclass
      * @return whether this supertype is inherited */
    public boolean isMinefieldFamilyPdu() { return getClass().getName().equals(MinefieldFamilyPdu.FAMILY_NAME); }

    /** Whether this instance has a RadioCommunicationsFamilyPdu superclass
      * @return whether this supertype is inherited */
    public boolean isRadioCommunicationsFamilyPdu() { return getClass().getName().equals(RadioCommunicationsFamilyPdu.FAMILY_NAME); }

    /** Whether this instance has a SimulationManagementFamilyPdu superclass
      * @return whether this supertype is inherited */
    public boolean isSimulationManagementFamilyPdu() { return getClass().getName().equals(SimulationManagementFamilyPdu.FAMILY_NAME); }

    /** Whether this instance has a SimulationManagementWithReliabilityFamilyPdu superclass
      * @return whether this supertype is inherited */
    public boolean isSimulationManagementWithReliabilityFamilyPdu() { return getClass().getName().equals(SimulationManagementWithReliabilityFamilyPdu.FAMILY_NAME); }

    /** Whether this instance has a SyntheticEnvironmentFamilyPdu superclass
      * @return whether this supertype is inherited */
    public boolean isSyntheticEnvironmentFamilyPdu() { return getClass().getName().equals(SyntheticEnvironmentFamilyPdu.FAMILY_NAME); }

    /** Whether this instance has a WarfareFamilyPdu superclass
      * @return whether this supertype is inherited */
    public boolean isWarfareFamilyPdu() { return getClass().getName().equals(WarfareFamilyPdu.FAMILY_NAME); }

    //  =================

    /** Whether this instance is an AcknowledgeRPdu
    * @return whether this type of Pdu */
  public boolean isAcknowledgeRPdu() { return getClass().getName().equals(AcknowledgeRPdu.NAME) ||
                                              getClass().getName().equals(AcknowledgeReliablePdu.NAME); }

    /** Whether this instance is an ActionRequestPdu
    * @return whether this type of Pdu */
  public boolean isActionRequestPdu() { return getClass().getName().equals(ActionRequestPdu.NAME); }

    /** Whether this instance is an ActionRequestRPdu
    * @return whether this type of Pdu */
  public boolean isActionRequestRPdu() { return getClass().getName().equals(ActionRequestRPdu.NAME) ||
                                                getClass().getName().equals(ActionRequestReliablePdu.NAME); }

    /** Whether this instance is an ActionResponsePdu
    * @return whether this type of Pdu */
  public boolean isActionResponsePdu() { return getClass().getName().equals(ActionResponsePdu.NAME); }

    /** Whether this instance is an ActionResponseRPdu
    * @return whether this type of Pdu */
  public boolean isActionResponseRPdu() { return getClass().getName().equals(ActionResponseRPdu.NAME) ||
                                                 getClass().getName().equals(ActionResponseReliablePdu.NAME); }

    /** Whether this instance is an AggregateStatePdu
    * @return whether this type of Pdu */
  public boolean isAggregateStatePdu() { return getClass().getName().equals(AggregateStatePdu.NAME); }

    /** Whether this instance is an AppearancePdu
    * @return whether this type of Pdu */
  public boolean isAppearancePdu() { return getClass().getName().equals(AppearancePdu.NAME); }

    /** Whether this instance is an ArealObjectStatePdu
    * @return whether this type of Pdu */
  public boolean isArealObjectStatePdu() { return getClass().getName().equals(ArealObjectStatePdu.NAME); }

    /** Whether this instance is an ArticulatedPartsPdu
    * @return whether this type of Pdu */
  public boolean isArticulatedPartsPdu() { return getClass().getName().equals(ArticulatedPartsPdu.NAME); }

    /** Whether this instance is an AttributePdu
    * @return whether this type of Pdu */
  public boolean isAttributePdu() { return getClass().getName().equals(AttributePdu.NAME); }

    /** Whether this instance is an CollisionElasticPdu
    * @return whether this type of Pdu */
  public boolean isCollisionElasticPdu() { return getClass().getName().equals(CollisionElasticPdu.NAME); }

    /** Whether this instance is an CollisionPdu
    * @return whether this type of Pdu */
  public boolean isCollisionPdu() { return getClass().getName().equals(CollisionPdu.NAME); }

    /** Whether this instance is an CommentPdu
    * @return whether this type of Pdu */
  public boolean isCommentPdu() { return getClass().getName().equals(CommentPdu.NAME); }

    /** Whether this instance is an CommentRPdu
    * @return whether this type of Pdu */
  public boolean isCommentRPdu() { return getClass().getName().equals(CommentRPdu.NAME) ||
                                          getClass().getName().equals(CommentReliablePdu.NAME); }

    /** Whether this instance is an CreateEntityPdu
    * @return whether this type of Pdu */
  public boolean isCreateEntityPdu() { return getClass().getName().equals(CreateEntityPdu.NAME); }

    /** Whether this instance is an CreateEntityRPdu
    * @return whether this type of Pdu */
  public boolean isCreateEntityRPdu() { return getClass().getName().equals(CreateEntityRPdu.NAME) ||
                                               getClass().getName().equals(CreateEntityReliablePdu.NAME); }

    /** Whether this instance is an DataPdu
    * @return whether this type of Pdu */
  public boolean isDataPdu() { return getClass().getName().equals(DataPdu.NAME); }

    /** Whether this instance is an DataQueryPdu
    * @return whether this type of Pdu */
  public boolean isDataQueryPdu() { return getClass().getName().equals(DataQueryPdu.NAME); }

    /** Whether this instance is an DataQueryRPdu
    * @return whether this type of Pdu */
  public boolean isDataQueryRPdu() { return getClass().getName().equals(DataQueryRPdu.NAME) ||
                                            getClass().getName().equals(DataQueryReliablePdu.NAME); }

    /** Whether this instance is an DataRPdu
    * @return whether this type of Pdu */
  public boolean isDataRPdu() { return getClass().getName().equals(DataRPdu.NAME) ||
                                       getClass().getName().equals(DataReliablePdu.NAME); }

    /** Whether this instance is an DesignatorPdu
    * @return whether this type of Pdu */
  public boolean isDesignatorPdu() { return getClass().getName().equals(DesignatorPdu.NAME); }

    /** Whether this instance is an DetonationPdu
    * @return whether this type of Pdu */
  public boolean isDetonationPdu() { return getClass().getName().equals(DetonationPdu.NAME); }

    /** Whether this instance is an DirectedEnergyFirePdu
    * @return whether this type of Pdu */
  public boolean isDirectedEnergyFirePdu() { return getClass().getName().equals(DirectedEnergyFirePdu.NAME); }

    /** Whether this instance is an ElectromagneticEmissionPdu
    * @return whether this type of Pdu */
  public boolean isElectromagneticEmissionPdu() { return getClass().getName().equals(ElectromagneticEmissionPdu.NAME); }

    /** Whether this instance is an EntityDamageStatusPdu
    * @return whether this type of Pdu */
  public boolean isEntityDamageStatusPdu() { return getClass().getName().equals(EntityDamageStatusPdu.NAME); }

    /** Whether this instance is an EntityStatePdu
    * @return whether this type of Pdu */
  public boolean isEntityStatePdu() { return getClass().getName().equals(EntityStatePdu.NAME); }

    /** Whether this instance is an EntityStateUpdatePdu
    * @return whether this type of Pdu */
  public boolean isEntityStateUpdatePdu() { return getClass().getName().equals(EntityStateUpdatePdu.NAME); }

    /** Whether this instance is an EnvironmentalProcessPdu
    * @return whether this type of Pdu */
  public boolean isEnvironmentalProcessPdu() { return getClass().getName().equals(EnvironmentalProcessPdu.NAME); }

    /** Whether this instance is an EventReportPdu
    * @return whether this type of Pdu */
  public boolean isEventReportPdu() { return getClass().getName().equals(EventReportPdu.NAME); }

    /** Whether this instance is an EventReportRPdu
    * @return whether this type of Pdu */
  public boolean isEventReportRPdu() { return getClass().getName().equals(EventReportRPdu.NAME) ||
                                              getClass().getName().equals(EventReportReliablePdu.NAME); }

    /** Whether this instance is an FirePdu
    * @return whether this type of Pdu */
  public boolean isFirePdu() { return getClass().getName().equals(FirePdu.NAME); }

    /** Whether this instance is an GriddedDataPdu
    * @return whether this type of Pdu */
  public boolean isGriddedDataPdu() { return getClass().getName().equals(GriddedDataPdu.NAME); }

    /** Whether this instance is an IFFPdu
    * @return whether this type of Pdu */
  public boolean isIFFPdu() { return getClass().getName().equals(IFFPdu.NAME) ||
                                     getClass().getName().equals(IdentificationFriendOrFoePdu.NAME); }

    /** Whether this instance is an InformationOperationsActionPdu
    * @return whether this type of Pdu */
  public boolean isInformationOperationsActionPdu() { return getClass().getName().equals(InformationOperationsActionPdu.NAME); }

    /** Whether this instance is an InformationOperationsReportPdu
    * @return whether this type of Pdu */
  public boolean isInformationOperationsReportPdu() { return getClass().getName().equals(InformationOperationsReportPdu.NAME); }

    /** Whether this instance is an IntercomControlPdu
    * @return whether this type of Pdu */
  public boolean isIntercomControlPdu() { return getClass().getName().equals(IntercomControlPdu.NAME); }

    /** Whether this instance is an IntercomSignalPdu
    * @return whether this type of Pdu */
  public boolean isIntercomSignalPdu() { return getClass().getName().equals(IntercomSignalPdu.NAME); }

    /** Whether this instance is an IsGroupOfPdu
    * @return whether this type of Pdu */
  public boolean isIsGroupOfPdu() { return getClass().getName().equals(IsGroupOfPdu.NAME); }

    /** Whether this instance is an IsPartOfPdu
    * @return whether this type of Pdu */
  public boolean isIsPartOfPdu() { return getClass().getName().equals(IsPartOfPdu.NAME); }

    /** Whether this instance is an LEDetonationPdu
    * @return whether this type of Pdu */
  public boolean isLEDetonationPdu() { return getClass().getName().equals(LEDetonationPdu.NAME); }

    /** Whether this instance is an LEFirePdu
    * @return whether this type of Pdu */
  public boolean isLEFirePdu() { return getClass().getName().equals(LEFirePdu.NAME); }

    /** Whether this instance is an LinearObjectStatePdu
    * @return whether this type of Pdu */
  public boolean isLinearObjectStatePdu() { return getClass().getName().equals(LinearObjectStatePdu.NAME); }

    /** Whether this instance is an LiveEntityDetonationPdu
    * @return whether this type of Pdu */
  public boolean isLiveEntityDetonationPdu() { return getClass().getName().equals(LiveEntityDetonationPdu.NAME); }

    /** Whether this instance is an LiveEntityFirePdu
    * @return whether this type of Pdu */
  public boolean isLiveEntityFirePdu() { return getClass().getName().equals(LiveEntityFirePdu.NAME); }

    /** Whether this instance is an MinefieldDataPdu
    * @return whether this type of Pdu */
  public boolean isMinefieldDataPdu() { return getClass().getName().equals(MinefieldDataPdu.NAME); }

    /** Whether this instance is an MinefieldQueryPdu
    * @return whether this type of Pdu */
  public boolean isMinefieldQueryPdu() { return getClass().getName().equals(MinefieldQueryPdu.NAME); }

    /** Whether this instance is an MinefieldResponseNACKPdu
    * @return whether this type of Pdu */
  public boolean isMinefieldResponseNACKPdu() { return getClass().getName().equals(MinefieldResponseNACKPdu.NAME); }

    /** Whether this instance is an MinefieldStatePdu
    * @return whether this type of Pdu */
  public boolean isMinefieldStatePdu() { return getClass().getName().equals(MinefieldStatePdu.NAME); }

    /** Whether this instance is an PointObjectStatePdu
    * @return whether this type of Pdu */
  public boolean isPointObjectStatePdu() { return getClass().getName().equals(PointObjectStatePdu.NAME); }

    /** Whether this instance is an ReceiverPdu
    * @return whether this type of Pdu */
  public boolean isReceiverPdu() { return getClass().getName().equals(ReceiverPdu.NAME); }

    /** Whether this instance is an RecordQueryRPdu
    * @return whether this type of Pdu */
  public boolean isRecordQueryRPdu() { return getClass().getName().equals(RecordQueryRPdu.NAME) ||
                                              getClass().getName().equals(RecordQueryReliablePdu.NAME); }

    /** Whether this instance is an RecordRPdu
    * @return whether this type of Pdu */
  public boolean isRecordRPdu() { return getClass().getName().equals(RecordRPdu.NAME) ||
                                         getClass().getName().equals(RecordReliablePdu.NAME); }

    /** Whether this instance is an RemoveEntityPdu
    * @return whether this type of Pdu */
  public boolean isRemoveEntityPdu() { return getClass().getName().equals(RemoveEntityPdu.NAME); }

    /** Whether this instance is an RemoveEntityRPdu
    * @return whether this type of Pdu */
  public boolean isRemoveEntityRPdu() { return getClass().getName().equals(RemoveEntityRPdu.NAME) ||
                                               getClass().getName().equals(RemoveEntityReliablePdu.NAME); }

    /** Whether this instance is an RepairCompletePdu
    * @return whether this type of Pdu */
  public boolean isRepairCompletePdu() { return getClass().getName().equals(RepairCompletePdu.NAME); }

    /** Whether this instance is an RepairResponsePdu
    * @return whether this type of Pdu */
  public boolean isRepairResponsePdu() { return getClass().getName().equals(RepairResponsePdu.NAME); }

    /** Whether this instance is an ResupplyCancelPdu
    * @return whether this type of Pdu */
  public boolean isResupplyCancelPdu() { return getClass().getName().equals(ResupplyCancelPdu.NAME); }

    /** Whether this instance is an ResupplyOfferPdu
    * @return whether this type of Pdu */
  public boolean isResupplyOfferPdu() { return getClass().getName().equals(ResupplyOfferPdu.NAME); }

    /** Whether this instance is an ResupplyReceivedPdu
    * @return whether this type of Pdu */
  public boolean isResupplyReceivedPdu() { return getClass().getName().equals(ResupplyReceivedPdu.NAME); }

    /** Whether this instance is an SEESPdu
    * @return whether this type of Pdu */
  public boolean isSEESPdu() { return getClass().getName().equals(SEESPdu.NAME) ||
                                      getClass().getName().equals(ServiceRequestPdu.NAME); }

    /** Whether this instance is an SetDataPdu
    * @return whether this type of Pdu */
  public boolean isSetDataPdu() { return getClass().getName().equals(SetDataPdu.NAME); }

    /** Whether this instance is an SetDataRPdu
    * @return whether this type of Pdu */
  public boolean isSetDataRPdu() { return getClass().getName().equals(SetDataRPdu.NAME) ||
                                          getClass().getName().equals(SetDataReliablePdu.NAME); }

    /** Whether this instance is an SetRecordRPdu
    * @return whether this type of Pdu */
  public boolean isSetRecordRPdu() { return getClass().getName().equals(SetRecordRPdu.NAME) ||
                                            getClass().getName().equals(SetRecordReliablePdu.NAME); }

    /** Whether this instance is an SignalPdu
    * @return whether this type of Pdu */
  public boolean isSignalPdu() { return getClass().getName().equals(SignalPdu.NAME); }

    /** Whether this instance is an StartResumePdu
    * @return whether this type of Pdu */
  public boolean isStartResumePdu() { return getClass().getName().equals(StartResumePdu.NAME); }

    /** Whether this instance is an StartResumeRPdu
    * @return whether this type of Pdu */
  public boolean isStartResumeRPdu() { return getClass().getName().equals(StartResumeRPdu.NAME) ||
                                              getClass().getName().equals(StartResumeReliablePdu.NAME); }

    /** Whether this instance is an StopFreezePdu
    * @return whether this type of Pdu */
  public boolean isStopFreezePdu() { return getClass().getName().equals(StopFreezePdu.NAME); }

    /** Whether this instance is an StopFreezeRPdu
    * @return whether this type of Pdu */
  public boolean isStopFreezeRPdu() { return getClass().getName().equals(StopFreezeRPdu.NAME) ||
                                             getClass().getName().equals(StopFreezeReliablePdu.NAME); }

    /** Whether this instance is an SupplementalEmissionEntityStatePdu
    * @return whether this type of Pdu */
  public boolean isSupplementalEmissionEntityStatePdu() { return getClass().getName().equals(SupplementalEmissionEntityStatePdu.NAME); }

    /** Whether this instance is an TSPIPdu
    * @return whether this type of Pdu */
  public boolean isTSPIPdu() { return getClass().getName().equals(TSPIPdu.NAME) ||
                                      getClass().getName().equals(TimeSpacePositionInformationPdu.NAME); }

    /** Whether this instance is an TransferOwnershipPdu
    * @return whether this type of Pdu */
  public boolean isTransferOwnershipPdu() { return getClass().getName().equals(TransferOwnershipPdu.NAME); }

  /** Whether this instance is an TransmitterPdu
    * @return whether this type of Pdu */
  public boolean isTransmitterPdu() { return getClass().getName().equals(TransmitterPdu.NAME); }

  /** Whether this instance is an UnderwaterAcousticPdu
    * @return whether this type of Pdu */
  public boolean isUnderwaterAcousticPdu() { return getClass().getName().equals(UnderwaterAcousticPdu.NAME); }

   /** The version of the protocol. 5=DIS-1995, 6=DIS-1998, 7=DIS-2012 uid 3 */
   protected DISProtocolVersion protocolVersion = DISProtocolVersion.IEEE_12781_2012;

   /** Exercise ID provides a unique identifier */
   protected byte exerciseID = (byte)0;

   /** Type of pdu, unique for each PDU class uid 4 */
   protected DisPduType pduType = DisPduType.values()[0];

   /** value that refers to the protocol family, eg SimulationManagement, et uid 5 */
   protected DISProtocolFamily protocolFamily = DISProtocolFamily.values()[0];

   /** Timestamp value, int representing number of 1.675 microseconds as interval past hour */
   protected int timestamp;

   /** Length, in bytes, of the PDU */
   protected short length;


/** Constructor creates and configures a new instance object */
 public Pdu()
 {
 }
    /** Create deep copy of current object using PduFactory.
     * @return deep copy of PDU
     */
     public synchronized Pdu copyByPduFactory()
     {
         PduFactory pduFactory = new PduFactory();
         Pdu newPdu = null; // initialize empty as placeholder
         try
         {
             newPdu = pduFactory.createPdu(marshal());
         }
         catch (Exception e)
         {
             System.err.println("Pdu copyByPduFactory() Exception: " + e.toString());
             System.exit(-1); // TODO: Abruptly ending VM not a best practice
         }
         return newPdu;
     }

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
@Override
public synchronized int getMarshalledSize()
{
   int marshalSize = 0; 

   if (protocolVersion != null)
       marshalSize += protocolVersion.getMarshalledSize();
   marshalSize += 1;  // exerciseID
   if (pduType != null)
       marshalSize += pduType.getMarshalledSize();
   if (protocolFamily != null)
       marshalSize += protocolFamily.getMarshalledSize();
   marshalSize += 4;  // timestamp
   marshalSize += 2;  // length

   return marshalSize;
}


/** Setter for {@link Pdu#protocolVersion}
  * @param pProtocolVersion new value of interest
  * @return same object to permit progressive setters */
public synchronized Pdu setProtocolVersion(DISProtocolVersion pProtocolVersion)
{
    protocolVersion = pProtocolVersion;
    return this;
}
/** Getter for {@link Pdu#protocolVersion}
  * @return value of interest */
public DISProtocolVersion getProtocolVersion()
{
    return protocolVersion; 
}

/** Setter for {@link Pdu#exerciseID}
  * @param pExerciseID new value of interest
  * @return same object to permit progressive setters */
public synchronized Pdu setExerciseID(byte pExerciseID)
{
    exerciseID = pExerciseID;
    return this;
}
/** Utility setter for {@link Pdu#exerciseID}
  * @param pExerciseID new value of interest
  * @return same object to permit progressive setters */
public synchronized Pdu setExerciseID(int pExerciseID){
    exerciseID = (byte) pExerciseID;
    return this;
}
/** Getter for {@link Pdu#exerciseID}
  * @return value of interest */
public byte getExerciseID()
{
    return exerciseID; 
}

/** Setter for {@link Pdu#pduType}
  * @param pPduType new value of interest
  * @return same object to permit progressive setters */
public synchronized Pdu setPduType(DisPduType pPduType)
{
    pduType = pPduType;
    return this;
}
/** Getter for {@link Pdu#pduType}
  * @return value of interest */
public DisPduType getPduType()
{
    return pduType; 
}

/** Setter for {@link Pdu#protocolFamily}
  * @param pProtocolFamily new value of interest
  * @return same object to permit progressive setters */
public synchronized Pdu setProtocolFamily(DISProtocolFamily pProtocolFamily)
{
    protocolFamily = pProtocolFamily;
    return this;
}
/** Getter for {@link Pdu#protocolFamily}
  * @return value of interest */
public DISProtocolFamily getProtocolFamily()
{
    return protocolFamily; 
}

/** Setter for {@link Pdu#timestamp}
  * Warning: this method sets a DIS bit pattern
  * @see setTimestampSeconds
  * @see edu.nps.moves.dis7.utilities.DisTime
  * @param pTimestamp new value of interest
  * @return same object to permit progressive setters */
public synchronized Pdu setTimestamp(int pTimestamp)
{
    timestamp = pTimestamp;
    return this;
}
/** Getter for {@link Pdu#timestamp}
  * Warning: this method gets a DIS bit pattern
  * @see getTimestampSeconds
  * @see edu.nps.moves.dis7.utilities.DisTime
  * @return value of interest */
public int getTimestamp()
{
    return timestamp; 
}

/** Setter for {@link Pdu#length}
  * @param pLength new value of interest
  * @return same object to permit progressive setters */
public synchronized Pdu setLength(short pLength)
{
    length = pLength;
    return this;
}
/** Utility setter for {@link Pdu#length}
  * @param pLength new value of interest
  * @return same object to permit progressive setters */
public synchronized Pdu setLength(int pLength){
    length = (short) pLength;
    return this;
}
/** Getter for {@link Pdu#length}
  * @return value of interest */
public short getLength()
{
    return length; 
}

/**
 * Serializes an object to a DataOutputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataOutputStream
 * @param dos the OutputStream
 */
@Override
public synchronized void marshal(DataOutputStream dos) throws Exception
{
    try 
    {
       protocolVersion.marshal(dos);
       dos.writeByte(exerciseID);
       pduType.marshal(dos);
       protocolFamily.marshal(dos);
       dos.writeInt(timestamp);
       dos.writeShort(length);
    }
    catch(Exception e)
    {
      System.err.println(e);
    }
}

/**
 * Deserializes an object from a DataInputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataInputStream
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param dis the InputStream
 * @return marshalled serialized size in bytes
 */
@Override
public synchronized int unmarshal(DataInputStream dis) throws Exception
{
    int uPosition = 0;
    try 
    {
        protocolVersion = DISProtocolVersion.unmarshalEnum(dis);
        uPosition += protocolVersion.getMarshalledSize();
        exerciseID = (byte)dis.readUnsignedByte();
        uPosition += 1;
        pduType = DisPduType.unmarshalEnum(dis);
        uPosition += pduType.getMarshalledSize();
        protocolFamily = DISProtocolFamily.unmarshalEnum(dis);
        uPosition += protocolFamily.getMarshalledSize();
        timestamp = dis.readInt();
        uPosition += 4;
        length = (short)dis.readUnsignedShort();
        uPosition += 2;
    }
    catch(Exception e)
    { 
      System.err.println(e); 
    }
    return getMarshalledSize();
}

/**
 * Packs an object into the ByteBuffer.
 * @throws java.nio.BufferOverflowException if byteBuffer is too small
 * @throws java.nio.ReadOnlyBufferException if byteBuffer is read only
 * @see java.nio.ByteBuffer
 * @param byteBuffer The ByteBuffer at the position to begin writing
 * @throws Exception ByteBuffer-generated exception
 */
@Override
public synchronized void marshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
   protocolVersion.marshal(byteBuffer);
   byteBuffer.put( (byte)exerciseID);
   pduType.marshal(byteBuffer);
   protocolFamily.marshal(byteBuffer);
   byteBuffer.putInt( (int)timestamp);
   byteBuffer.putShort( (short)length);
}

/**
 * Unpacks a Pdu from the underlying data.
 * @throws java.nio.BufferUnderflowException if byteBuffer is too small
 * @see java.nio.ByteBuffer
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param byteBuffer The ByteBuffer at the position to begin reading
 * @return marshalled serialized size in bytes
 * @throws Exception ByteBuffer-generated exception
 */
@Override
public synchronized int unmarshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
    try
    {
        // attribute protocolVersion marked as not serialized
        protocolVersion = DISProtocolVersion.unmarshalEnum(byteBuffer);
        // attribute exerciseID marked as not serialized
        exerciseID = (byte)(byteBuffer.get() & 0xFF);
        // attribute pduType marked as not serialized
        pduType = DisPduType.unmarshalEnum(byteBuffer);
        // attribute protocolFamily marked as not serialized
        protocolFamily = DISProtocolFamily.unmarshalEnum(byteBuffer);
        // attribute timestamp marked as not serialized
        timestamp = byteBuffer.getInt();
        // attribute length marked as not serialized
        length = (short)(byteBuffer.getShort() & 0xFFFF);
    }
    catch (java.nio.BufferUnderflowException bue)
    {
        System.err.println("*** buffer underflow error while unmarshalling " + this.getClass().getName());
    }
    return getMarshalledSize();
}


/**
 * A convenience method for marshalling to a ByteBuffer
 * @return a ByteBuffer with the marshalled {@link Pdu}
 * @throws Exception ByteBuffer-generated exception
 */
public synchronized java.nio.ByteBuffer marshal() throws Exception
{
    java.nio.ByteBuffer byteBuffer = java.nio.ByteBuffer.allocate(1500);
    marshal(byteBuffer);
    return byteBuffer.rewind();
}

 /*
  * Override of default equals method.  Calls equalsImpl() for content comparison.
  */
@Override
 public synchronized boolean equals(Object obj)
 {
    if(this == obj)
      return true;

    if(obj == null)
       return false;

    if(!getClass().isAssignableFrom(obj.getClass())) //if(getClass() != obj.getClass())
        return false;

    return equalsImpl(obj);
 }

 /**
  * Compare all fields that contribute to the state, ignoring
  * transient and static fields, for <code>this</code> and the supplied object
  * @param obj the object to compare to
  * @return true if the objects are equal, false otherwise.
  */
 public synchronized boolean equalsImpl(Object obj)
 {
     final Pdu rhs = (Pdu)obj;

     if( ! (protocolVersion == rhs.protocolVersion)) return false;
     if( ! (exerciseID == rhs.exerciseID)) return false;
     if( ! (pduType == rhs.pduType)) return false;
     if( ! (protocolFamily == rhs.protocolFamily)) return false;
     if( ! (timestamp == rhs.timestamp)) return false;
     if( ! (length == rhs.length)) return false;
    return true;
 }

 @Override
 public synchronized String toString()
 {
    StringBuilder sb  = new StringBuilder();
    StringBuilder sb2 = new StringBuilder();
    sb.append(getClass().getSimpleName());
    sb.append(" protocolVersion:").append(protocolVersion); // writeOneToString
    sb.append(" exerciseID:").append(exerciseID); // writeOneToString
    sb.append(" pduType:").append(pduType); // writeOneToString
    sb.append(" protocolFamily:").append(protocolFamily); // writeOneToString
    sb.append(" timestamp:").append(timestamp); // writeOneToString
    sb.append(" length:").append(length); // writeOneToString

   return sb.toString();
 }

 @Override
 public int hashCode()
 {
	 return Objects.hash(this.protocolVersion,
	                     this.exerciseID,
	                     this.pduType,
	                     this.protocolFamily,
	                     this.timestamp,
	                     this.length);
 }

// autogenerated by JavaGenerator.writePduUtilityMethods()

/** Utility setter for {@link Pdu#timestamp} converting double (or float) to
  * Timestamp in seconds at 2^31 - 1 units past top of hour
  * @see setTimestamp
  * @see edu.nps.moves.dis7.utilities.DisTime
  * @param newTimestamp new timestamp in seconds
  * @return same object to permit progressive setters */
public synchronized Pdu setTimestampSeconds(double newTimestamp)
{
    timestamp = (int) ((newTimestamp * 3600.0) / Integer.MAX_VALUE);
    return this;
}      
/** Utility getter for {@link Pdu#timestamp} converting 
  * integer timestamp at 2^31 - 1 units past top of hour to double (or float)
  * @see getTimestamp
  * @see edu.nps.moves.dis7.utilities.DisTime
  * @return fractional timestamp past hour */
public double getTimestampSeconds()
{
    return timestamp * Integer.MAX_VALUE / 3600.0;
}
 /**
  * Whether or not timestamp for this Pdu occurs after timestamp as another Pdu.
  * @param pdu2 second Pdu for comparison
  * @return whether timestamp for this Pdu occurs later
  */
  public boolean occursAfter(Pdu pdu2)
  {
     return (getTimestamp() < pdu2.getTimestamp());
  }
 /**
  * Whether or not timestamp for this Pdu occurs before timestamp as another Pdu.
  * @param pdu2 second Pdu for comparison
  * @return whether timestamp for this Pdu occurs earlier
  */
  public boolean occursBefore(Pdu pdu2)
  {
     return (getTimestamp() < pdu2.getTimestamp());
  }
 /**
  * Whether or not this Pdu occurs at same timestamp as another Pdu.
  * @param pdu2 second Pdu for comparison
  * @return whether timestamps are identical for both Pdus
  */
  public boolean occursSameTime(Pdu pdu2)
  {
     return (getTimestamp() == pdu2.getTimestamp());
  }


} // end of Pdu
